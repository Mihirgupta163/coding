#include<bits/stdc++.h>
#include<map>
#include<iostream>
#include<queue>
using namespace std; 
template <typename T > 
class Graph
    {
            map <T,list<T>> l;
            public :
         void addEdge(T x,T y) // assmuing bidirectional
         {
            l[x].push_back(y);
            l[y].push_back(x); 
         }
         void bfs(T src)
         {
            queue<T> q;
            map<T,int > visited;
            q.push(src);
            visited[src]=true;
            while(!q.empty()) 
                {
                        T node= q.front(); 
                        cout<<node<<" ";
                        q.pop();
                        for(auto nbr:l[node])
                             {
                                     if(!visited[nbr])
                                                 {
                                                     q.push(nbr);
                                                        //marks visted as true
                                                    visited[nbr]=true;
                                                }
                            }
                
                }
        }
    };
int main()
{
    Graph<int> g;
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(0,3);
    g.addEdge(3,4);
    g.addEdge(4,5);
    g.bfs(0);

return 0;
}
