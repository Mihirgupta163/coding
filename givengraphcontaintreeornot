#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph
{
    int v;
    list<int> *l;
    public:
    Graph(int v)
    {
        this->v=v;
        l=new list<int>[v];
    }
    void addEdge(int x,int y)  // assuming graph is birectional
    {
        l[x].push_back(y);
        l[y].push_back(x);
    }
    bool isTree()
    {
        int src=0;
        bool  *visited=new bool[v];
        int  *parent=new int[v];
        for(int i=0;i<v;i++)
        {
        visited[i]=false;
        parent[i]=i;
        }
        queue<int> q;
        q.push(src);
        visited[src]=true;
        while(!q.empty())
            {
                int node=q.front();
                q.pop();
                for(auto nbr:l[node])
                {
                    if(visited[nbr]==true and parent[node]!=nbr)
                    return false;
                    else if(!visited[nbr])
                    {
                        visited[nbr]=true;
                        parent[nbr]=node;
                        q.push(nbr);
                    }
                }

            }
            return true;
     }
};
int main() {
    cout<<"Hello World!";
    Graph g(4);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(2,3);
    g.addEdge(3,1);
    if(g.isTree()==true)
    cout<<"Graph is tree";
    else
    cout<<"Graph is not tree";
    return 0;
}
